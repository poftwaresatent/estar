# Copyright (c) 2005 CNRS/LAAS
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

prefix=		@prefix@
exec_prefix=	@exec_prefix@
top_builddir=	.
top_srcdir=	@top_srcdir@
srcdir=		@srcdir@

BINDIR=		@bindir@
LIBDIR=		@libdir@
INCLUDEDIR=	@includedir@

SHELL=          /bin/bash
AWK=            @AWK@
CC=		@CC@
CXX=		@CXX@
LIBTOOL=	@LIBTOOL@
INSTALL=	@INSTALL@
INSTALL_DATA=   $(INSTALL) -m644
MKINSTALLDIRS=	$(SHELL) $(srcdir)/mkinstalldirs

LTCC=		$(LIBTOOL) --mode=compile $(CC)
LTCXX=		$(LIBTOOL) --mode=compile $(CXX)
LTLD=		$(LIBTOOL) --mode=link $(CXX)

CPPFLAGS=       @CPPFLAGS@ @BOOST_CPPFLAGS@ -I$(top_srcdir)
CFLAGS=         @CFLAGS@ @BOOST_CPPFLAGS@ $(CPPFLAGS)
CXXFLAGS=       @CXXFLAGS@ @BOOST_CPPFLAGS@ $(CPPFLAGS)

#@glut@ expands to GLUT or NOGLUT depending on configure script
@glut@LIBS=     @GFXLIBS@

SHLIB_CURRENT=	0
SHLIB_REVISION=	0
SHLIB_AGE=	0
LIB=            libestar.la

CSRCS=          pnf/pnf_cooc.c

CXXSRCS=        estar/Algorithm.cpp \
		estar/AlphaKernel.cpp \
		estar/base.cpp \
		estar/check.cpp \
		estar/cwrap.cpp \
		estar/dump.cpp \
		estar/Facade.cpp \
		estar/Grid.cpp \
		estar/Kernel.cpp \
		estar/LSMKernel.cpp \
		estar/NF1Kernel.cpp \
		estar/numeric.cpp \
		estar/Propagator.cpp \
		estar/Queue.cpp \
		estar/Upwind.cpp \
		estar/util.cpp \
		pnf/BufferZone.cpp \
		pnf/Flow.cpp \
		pnf/PNFRiskMap.cpp \
		pnf/RobotShape.cpp \
                bin/Getopt.cpp

#@glut@ expands to GLUT or NOGLUT depending on configure script
@glut@SRCS=     gfx/MetaMousehandler.cpp \
		gfx/Subwindow.cpp \
		gfx/Viewport.cpp \
		gfx/wrap_glu.cpp \
		estar/graphics.cpp \

HEADERS=        estar/Algorithm.hpp \
		estar/AlphaKernel.hpp \
		estar/base.hpp \
		estar/check.hpp \
		estar/cwrap.h \
		estar/dump.hpp \
		estar/Facade.hpp \
		estar/Grid.hpp \
		estar/Kernel.hpp \
		estar/LSMKernel.hpp \
		estar/NF1Kernel.hpp \
		estar/numeric.hpp \
		estar/Propagator.hpp \
		estar/Queue.hpp \
		estar/RiskMap.hpp \
		estar/Upwind.hpp \
		estar/util.hpp \
		pnf/BufferZone.hpp \
		pnf/Flow.hpp \
		pnf/pnf_cooc.h \
		pnf/PNFRiskMap.hpp \
		pnf/RobotShape.hpp \
                bin/Getopt.hpp

@glut@HEADERS=  gfx/MetaMousehandler.hpp \
		gfx/Mousehandler.hpp \
		gfx/Subwindow.hpp \
		gfx/Viewport.hpp \
		gfx/wrap_gl.hpp \
		gfx/wrap_glu.hpp \
		gfx/wrap_glut.hpp \
		estar/graphics.hpp \

BIN_CSRC=       bin/test_pnf_cooc3d.c \
		bin/test_pnf_cooc.c \
		bin/test_estar_cwrap.c

BIN_CXXSRC=     bin/test_pnf_riskmap.cpp \
		bin/test_estar.cpp \
		bin/test_dbg_opt.cpp \
		bin/test_fake_os.cpp \
		bin/test_estar_queue.cpp
BIN_CXXOBJS=    $(BIN_CXXSRC:%.cpp=%.o)

@glut@BIN_SRC=  bin/test_pnf_gfx.cpp \
		bin/test_estar_gfx.cpp

OBJS=           $(CXXSRCS:%.cpp=%.lo) $(CSRCS:%.c=%.lo) $(GLUTSRCS:%.cpp=%.lo)
BIN_OBJS=       $(BIN_CSRC:%.c=%.o) \
                $(BIN_CXXSRC:%.cpp=%.o) \
                $(GLUTBIN_SRC:%.cpp=%.o)

VPATH=		@srcdir@


all: lib binaries

lib: $(LIB)

$(LIB): depend subdirs $(OBJS)
	$(LTLD) -o $@ -rpath $(LIBDIR) -R$(LIBDIR) \
          -version-info $(SHLIB_CURRENT):$(SHLIB_REVISION):$(SHLIB_AGE) $(OBJS)

# To do: This remakes all binaries if just one of the *.o changes,
# would be better to use three separate targets for each type of
# binary.
binaries: depend subdirs $(BIN_OBJS)
	for bin in $(BIN_CSRC:%.c=%); do \
	  $(CC) $(CFLAGS) -o $$bin $$bin.o -L.libs -lestar -lstdc++; \
	done
	for bin in $(BIN_CXXSRC:%.cpp=%); do \
	  $(CXX) $(CXXFLAGS) -o $$bin $$bin.o -L.libs -lestar; \
	done
	for bin in $(GLUTBIN_SRC:%.cpp=%); do \
	  $(CXX) $(CXXFLAGS) -o $$bin $$bin.o -L.libs -lestar $(GLUTLIBS); \
	done
	echo "binaries built `date`" > binaries

doc:
	mkdir -p html
	cp $(top_srcdir)/doxylogo.png html
	doxygen
	echo "doc build `date`" > doc

%.lo: %.c
	$(LTCC) $(CFLAGS) -o $*.o -c $<

%.lo: %.cpp
	$(LTCXX) $(CXXFLAGS) -o $*.o -c $<


subdirs:
	- mkdir estar gfx pnf bin
	echo "subdirs created `date`" > subdirs

install:: $(LIB)
	$(MKINSTALLDIRS) $(LIBDIR)
	$(LIBTOOL) --mode=install $(INSTALL) $(LIB) $(LIBDIR)
	echo "installed `date`" > install

install:: estar.pc
	$(MKINSTALLDIRS) $(LIBDIR)/pkgconfig
	$(INSTALL) estar.pc $(LIBDIR)/pkgconfig
	echo "installed `date`" > install

install:: $(HEADERS) $(GLUTHEADERS)
	for header in $(HEADERS) $(GLUTHEADERS); do \
	  subdir=`dirname $$header`; \
	  $(MKINSTALLDIRS) $(INCLUDEDIR)/$$subdir; \
	  $(INSTALL_DATA) $(srcdir)/$$header $(INCLUDEDIR)/$$subdir; \
	done
	echo "installed `date`" > install

bininstall:: binaries
	$(MKINSTALLDIRS) $(BINDIR)
	for bin in \
	  $(BIN_CSRC:%.c=%) $(BIN_CXXSRC:%.cpp=%) $(GLUTBIN_SRC:%.cpp=%); \
	  do \
	    $(LIBTOOL) --mode=install $(INSTALL) $$bin $(BINDIR); \
	done
	echo "installed `date`" > binaries

distclean: clean
	rm -f Makefile Doxyfile config.log config.status estar.pc libtool
	rm -rf bin doc estar gfx pnf

clean: 
	rm -f depend Makefile.depend install subdirs binaries
	$(LIBTOOL) --mode=clean rm -f $(OBJS) $(LIB)
	- rm $(BIN_CXXSRC:%.cpp=%.o) $(BIN_CSRC:%.c=%.o)
	- rm $(BIN_CXXSRC:%.cpp=%) $(BIN_CSRC:%.c=%)
	- rm $(GLUTBIN_SRC:%.cpp=%) $(GLUTBIN_SRC:%.cpp=%.o)


depend:
	rm -f Makefile.depend
	for source in $(CXXSRCS) $(CSRCS) $(GLUTSRCS); \
	  do \
	    subdir=`dirname $$source`; \
	    $(CC) -MM $(CPPFLAGS) $(top_srcdir)/$$source \
	      | $(AWK) -v subdir=$$subdir \
	'{if($$0~/^[^ ]/){sub(/o:/,"lo:"); print subdir "/" $$0} else print}' \
	     >> Makefile.depend; \
	done
	for source in $(BIN_CSRC) $(BIN_CXXSRC) $(GLUTBIN_SRC); \
	  do \
	    subdir=`dirname $$source`; \
	    $(CC) -MM $(CPPFLAGS) $(top_srcdir)/$$source \
	      | $(AWK) -v subdir=$$subdir \
	        '{if($$0~/^[^ ]/){print subdir "/" $$0} else print}' \
	     >> Makefile.depend; \
	done
	echo "Makefile.depend written `date`" > depend

sinclude Makefile.depend
